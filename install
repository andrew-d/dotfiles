#!/usr/bin/env python
# encoding: utf-8

import errno
from shutil import copytree, move, rmtree, copy2
from datetime import datetime
from os.path import *
from os import *    # Note: os must come after, so walk() is from here.
from subprocess import call


START_TIME = datetime.now()
HOME_DIR = expanduser('~')
REPO_DIR = dirname(realpath(__file__))
BACKUP_DIR = join(REPO_DIR, "backups", START_TIME.strftime("%Y_%m_%d-%H_%M_%S"))


def mkdir_p(path):
    try:
        makedirs(path)
    except OSError as ex:
        if ex.errno == errno.EEXIST:
            pass
        else:
            raise


def run(cmd):
    call(cmd, shell=True)


def move_and_backup_file(path):
    # Move to backups directory.
    fname = basename(path)
    new_path = join(BACKUP_DIR, fname)
    try:
        rename(path, new_path)
        return new_path
    except OSError as ex:
        print "[ERROR ] Error {0} while trying to backup: {1} --> {2}".format(ex.errno, path, new_path)
        return None


def install_dotfile(file_path):
    dest_name = "." + basename(file_path)
    dest_path = join(HOME_DIR, dest_name)

    # Check if the dotfile has been linked already.
    if exists(dest_path):
        if islink(dest_path):
            if readlink(dest_path).startswith(REPO_DIR):
                # Up-to-date, so do nothing.
                print "[STATUS] {0} is up-to-date!".format(dest_name)
                return True
            else:
                # Exists, not up-to-date.
                print "[STATUS] {0} is out-of-date (links to: {1})".format(
                    dest_name, readlink(dest_path))

        # Backup the file.
        new_file = move_and_backup_file(dest_path)
        if new_file is None:
            print "[ERROR ] Could not back up - not overwriting"
            return False
        else:
            print "[BACKUP] {0} --> {1}".format(dest_path, new_file)

    # Either doesn't exist, or existed and we removed it.
    try:
        symlink(file_path, dest_path)
        print "[MKLINK] {0} --> {1}".format(file_path, dest_path)
    except OSError:
        return False


def copy_missing(src, dest):
    # This function is our helper - it gets passed individual prefixes
    # instead of absolute paths.
    def copy_dir(src, dest, prefix):
        # Current location.
        src_path = join(src, prefix)
        dst_path = join(dest, prefix)

        # Find all files in the source directory.
        for root, dirs, files in walk(src_path):
            # Check all files.
            for f in files:
                # Make names.
                src_file = join(src_path, f)
                dst_file = join(dst_path, f)

                # Is it newer?
                src_mtime = lstat(src_file).st_mtime

                try:
                    dst_mtime = lstat(dst_file).st_mtime
                except OSError as ex:
                    if ex.errno == errno.ENOENT:
                        dst_mtime = 0
                    else:
                        raise

                if src_mtime > dst_mtime:
                    # Copy it.
                    print "[COPY  ] {0} --> {1}".format(src_file, dst_file)
                    copy2(src_file, dst_file)
                else:
                    # Don't copy it.
                    print "[NOCOPY] {0} --> {1} (destination is newer)".format(src_file, dst_file)

            # Ensure all directories are there, then recurse.
            for d in dirs:
                dst_dir = join(dst_path, d)
                if exist(dst_dir):
                    if not isdir(dst_dir):
                        print "[ERROR ] {0} is not a directory!".format(dst_dir)
                        continue
                else:
                    mkdir(dst_dir)

                copy_dir(src, dest, join(prefix, d))

    return copy_dir(src, dest, "")


def main():
    # Update submodules.
    run("git submodule update")
    run("git submodule foreach git pull")

    # Make backup directory.
    mkdir_p(BACKUP_DIR)

    # Exec everything in pre_install.
    pre_dir = join(REPO_DIR, "pre_install")
    for f in listdir(pre_dir):
        curr = join(pre_dir, f)
        if access(curr, X_OK):
            print "[PREXEC] {0}".format(curr)
            run(curr)

    # Get directories.
    link_dir = join(REPO_DIR, "link")
    copy_dir = join(REPO_DIR, "copy")

    # Link in all dotfiles from link/.
    # Note: we link even directories, so our ".vim" dir works
    for f in listdir(link_dir):
        fpath = join(link_dir, f)
        install_dotfile(fpath)

    # Copy all files from copy/ to local/
    local_dir = join(REPO_DIR, "local")
    copy_missing(copy_dir, local_dir)

    # if exists(local_dir) and isdir(local_dir):
    #     print "[BACKUP] {0} --> {1}".format(local_dir, BACKUP_DIR)
    #     move(local_dir, BACKUP_DIR)

    # print "[COPY  ] {0} --> {1}".format(copy_dir, local_dir)
    # copytree(copy_dir, local_dir)

    # Now, symlink everything in.
    for f in listdir(local_dir):
        fpath = join(local_dir, f)

        if not isdir(fpath):
            install_dotfile(fpath)

    # Exec everything in post_install.
    pre_dir = join(REPO_DIR, "post_install")
    for f in listdir(pre_dir):
        curr = join(pre_dir, f)
        if access(curr, X_OK):
            print "[POEXEC] {0}".format(curr)
            run(curr)

if __name__ == '__main__':
    main()

