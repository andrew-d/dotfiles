" =============================================================================
" GENERAL SETTINGS
" -----------------------------------------------------------------------------
set nocompatible                        " Disable compatibility with vi
call pathogen#infect()                  " Initialize pathogen.

set history=1000                        " Command history = lots
set undolevels=1000                     " Lots and lots of undo
filetype on                             " Filetype detection on
filetype plugin on                      " Enable loading plugin files
filetype indent on                      " Enable loading indent files
syntax on                               " Syntax highlighting on
set synmaxcol=2048                      " Don't syntax highlight super-long lines (for performance)

set nobk nowb noswf                     " Disable backup, swapfiles, etc. (we have git)
set modelines=0                         " Disable modelines, for security

set enc=utf-8                           " Set the default encoding to UTF-8
set mouse=a                             " Enable mouse support.
" set hidden                              " Enable hidden buffers

" Set a long timeout for mappings, but a short timeout for keycodes (so 'Esc'
" is quickly detected, but you can take a while to type mappings).
set timeout timeoutlen=3000 ttimeoutlen=100


" =============================================================================
" PRESENTATION AND DISPLAY
" -----------------------------------------------------------------------------
set shortmess=atI                       " Disable the distracting intro screen
set visualbell                          " Flash cursor instead of bell
set noerrorbells                        " No error bells
set showmode                            " Display the current mode in the status bar
set lazyredraw                          " Don't redraw the screen during macros.
set ttyfast                             " Improve redrawing for 'newer' computers
set numberwidth=5                       " Linenumber width is 5
set scrolloff=8                         " When the page starts to scroll, keep the cursor 8 lines from top/bottom

set list                                " Show tabs as ">"
set listchars=tab:>.

" Pressing F2 will toggle and show the paste value
nnoremap <F2> :set invpaste paste?<CR>
set pastetoggle=<F2>                    " F2 should toggle in insert mode too

" Uncomment to highlight the line with the cursor.  I find this kinda irritating.
"set cursorline

" On newish versions of vim, this sets up line numbering.
if v:version >= 703
  set relativenumber                    " Use relative line numbers

  function! NumberToggle()
    if(&relativenumber == 1)
      set number
    else
      set relativenumber
    endif
  endfunc

  " Ctrl-N switches between relative and absolute line numbers
  nnoremap <C-n> :call NumberToggle()<cr>

  " We use absolute numbers in insert mode
  autocmd InsertEnter * :set number
  autocmd InsertLeave * :set relativenumber

  " Switch to absolute numbers when Vim loses focus
  autocmd FocusLost * :set number
  autocmd FocusGained * :set relativenumber
else
  set number                            " Show line numbers
endif


" =============================================================================
" STATUSLINE
" -----------------------------------------------------------------------------
set laststatus=2                        " Always display a status line
set title                               " Show file in titlebar
set ruler                               " Enable the ruler
set showcmd                             " Show incomplete command at bottom right.
set showmode                            " Always show the paste mode in the status line

" Set the ruler format.
set rulerformat=%30(%=\:b%n%y%m%r%w\ %l,%c%V\ %P%)

" =============================================================================
" TAB AND INDENT SETTINGS
" -----------------------------------------------------------------------------
set smarttab                            " Tabs are treated as single characters
set expandtab                           " Expand tab into spaces
set tabstop=4                           " Tabs are width 4 by default
set shiftwidth=4
set softtabstop=4
set autoindent                          " Copy indentation from previous line
"set smartindent                        " Disabled since filetype indent is on

" Turn off tab-replacement for Makefiles
autocmd FileType make setlocal noexpandtab

" Ruby-specific settings: tabs are 2 characters
autocmd FileType ruby set textwidth=79
autocmd FileType ruby set tabstop=2
autocmd FileType ruby set shiftwidth=2
autocmd FileType ruby set softtabstop=2
"autocmd FileType ruby set g:detectindent_preferred_expandtab = 1

" Set smartindent keywords for Python.
autocmd BufRead,BufNewFile *.py set smartindent cinwords=if,elif,else,for,while,try,except,finally,def,class,with

" =============================================================================
" COMMAND SETTINGS
" -----------------------------------------------------------------------------
set wildmenu                            " Enable command-line tab completion
set wildmode=longest,list,full          " Set tab-completion order

" Types to ignore when autocompleting.
set wildignore+=*.o,*.obj,*.pyc,*.DS_Store,*.db,.git,*.bak,.svn,*.swp

" Auto-insert longest match, show menu for even 1 item, and show more info in
" the preview window.
set completeopt=longest,menuone,preview

" Complete by pulling from, in order: the current file, loaded buffers,
" unloaded buffers, and the tags file.
set complete=.,b,u,]


" =============================================================================
" SEARCH AND REPLACE SETTINGS
" -----------------------------------------------------------------------------
set ignorecase                          " Ignore case when searching all lower-case ...
set smartcase                           " ... but be case-sensitive if the search has mixed case
set hlsearch                            " Highlight search matches!
set incsearch                           " Search incrementally
set wrapscan                            " Wrap searches around the beginning/end of the file
set gdefault                            " Apply substitutions globally by default

" Space will unhighlight search and clear any diplayed message
nnoremap <silent> <Space> :nohlsearch<Bar>:echo<CR><Space>


" =============================================================================
" NAVIGATION SETTINGS
" -----------------------------------------------------------------------------
"set virtualedit=all                    " Allow the cursor to go to 'invalid' locations. Note: disabled becuase it's irritating.
set backspace=indent,eol,start          " Allow backspacing over anything
set switchbuf=useopen,usetab            " Files are opened from buffers, if it exists

" The following mappings make Ctrl+navkey move that direction in windows
noremap <C-j> <C-W>j
noremap <C-k> <C-W>k
noremap <C-l> <C-W>l
noremap <C-h> <C-W>h


" =============================================================================
" DISPLAY AND COLOR SETTINGS
" -----------------------------------------------------------------------------
set showmatch                           " Show matching brackets

" The following bit sets up a highlight scheme and the associated mappings that
" highlight trailing whitespace. This must be done before the color scheme is specified.
highlight ExtraWhitespace ctermbg=red guibg=red
autocmd ColorScheme * highlight ExtraWhitespace ctermbg=red guibg=red
autocmd BufEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhiteSpace /\s\+$/

" Display tabs at the beginning of lines in Python as bad.
autocmd BufRead,BufNewFile *.py match ExtraWhitespace /^\t\+/

let g:solarized_termcolors=256          " Fixes solarized colors.
set background=dark                     " Use a dark background
colorscheme solarized                   " Use the solarized colorscheme

" Add json syntax highlighting
autocmd BufNewFile,BufRead *.json set filetype=javascript

" Enable all python syntax highlighting.
let python_highlight_all=1

" Enable omnicompletion for all filetypes that don't have an omnifunction.
if has("autocmd") && exists("+omnifunc")
    autocmd Filetype * if &omnifunc == "" | setlocal omnifunc=syntaxcomplete#Complete | endif
endif


" =============================================================================
" MAPPINGS AND REMAPPINGS
" -----------------------------------------------------------------------------
" Pressing 'K' splits the line at the current cursor pos
nnoremap K i<CR><Esc>

" Shift-Enter will insert a line below the current line, without going into
" insert mode.
map <S-Enter> o<Esc>

" Ctrl-Shift-Enter does the same as Shift-Enter, except above.
map <CS-Enter> O<Esc>

" NOTE: the above two lines don't seem to work in a terminal :(

" Ctrl-s saves the file (like other editors!)
map <C-s> :w<CR>

" Map ; to : in normal mode
nnoremap ; :

" Remap F1 to escape.  This is especially useful on Kinesis keyboards
map <F1> <Esc>

" Ditto above for insert mode
imap <F1> <Esc>

" Ditto above for visual mode
vmap <F1> <Esc>

" Tab in visual mode indents the selection
vmap <Tab> >

" Shift-Tab in visual mode dedents the selection
vmap <S-Tab> <

" Make Enter and space select a highlighted menu item.
inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
inoremap <expr> <Space> pumvisible() ? "\<C-y>" : "\<Space>"

" Make Ctrl-N work as normal, but also select the first menu item
" automatically.
inoremap <expr> <C-n> pumvisible() ? '<C-n>' : '<C-n><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'

" Map Ctrl-@ to Ctrl-Space, to support some terminals that do this.  This is
" used in the autocomplete mapping, below.
imap <C-@> <C-Space>

" w!! will save the file with sudo
cmap w!! w !sudo tee % >/dev/null

" MS Windows-style 'next pane' and 'previous pane' (overridden for Vim 7 later)
"nmap <C-Tab> w
"nmap <CS-Tab> W


" -----------------------------------------------------------------------------
" Leader Mappings (subsection)
" -----------------------------------------------------------------------------
" Explicitly set the leader.
let mapleader="\\"

" <leader>W will strip all trailing whitespace in the file
nnoremap <leader>W :%s/\s\+$//<cr>:let @/=''<CR>

" <leader>a calls Ack, since it's shorter!
" NOTE: the trailing space is IMPORTANT - it means that I don't have to type it
" after using <leader>a
nnoremap <leader>a :Ack 

" <leader>w will open a new vertical split window, and switch to it
nnoremap <leader>w <C-w>v<C-w>l

" <leader>v will open a new, empty vertical window to the right
nnoremap <leader>v :rightbelow vnew<CR>


" =============================================================================
" PLUGIN SETTINGS
" -----------------------------------------------------------------------------
let g:ctrlp_map = '<c-p>'               " Set Ctrl-P as the command to invoke the CtrlP plugin.
let g:ctrlp_cmd = 'CtrlP'

" Turn off automatic syntax checking for Syntastic.  I prefer to run this manually.
let g:syntastic_mode_map = { 'mode': 'passive' }


" =============================================================================
" CUSTOM FUNCTIONS
" -----------------------------------------------------------------------------
" Map <Leader>x to set the execute bit on the current file
function! SetExecutableBit()
    let fname = expand("%:p")
    checktime
    execute "au FileChangedShell " . fname . " :echo"
    silent !chmod a+x %
    checktime
    execute "au! FileChangedShell " . fname
    redraw!
    echo "chmod +x " . fname
endfunction
command! Chmodx call SetExecutableBit()
map <Leader>x :Chmodx<cr>

" On save, make file executable if has shebang line starting with '/bin/' or '/usr/bin/'
" NOTE: Depends on SetExecutableBit, above, so don't move this.
autocmd BufWritePost * if getline(1) =~ "^#!/bin/" | :call SetExecutableBit() | elseif getline(1) =~ "^#!/usr/bin/" | :call SetExecutableBit() | endif

" Tab-complete by first using omnicompletion, then checking the dictionary, and finally using known-word completion.
function! SuperCleverTab()
    if strpart(getline('.'), 0, col('.') - 1) =~ '^\s*$'
        return "\<Tab>"
    else
        if &omnifunc != ''
            return "\<C-X>\<C-O>"
        elseif &dictionary != ''
            return "\<C-K>"
        else
            return "\<C-N>"
        endif
    endif
endfunction
" inoremap <C-Space> <C-R>=SuperCleverTab()<cr>
inoremap <expr> <C-Space> pumvisible() ? '<C-n>' :
  \ '<C-r>=SuperCleverTab()<CR><C-n><C-p><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'

" If we're on Vim 7+, we setup functions to move through windows.
if v:version >= 700
    " A single key for stepping through all open buffers.
    function NextWindow()
        if winnr() == winnr('$')
            if tabpagenr() == tabpagenr('$')
                " We're at the end of the last tab, go back to the beginning
                tabfirst    " Go to first tab
                1 wincmd w  " Go to first window
            else
                " We're at the end of this tab, go to the next tab
                tabnext     " Go to next tab
                1 wincmd w  " Go to first window
            endif
        else
            " We're at some random window in the tab, go to the next window
            wincmd w
        endif
    endfunction

    function PrevWindow()
        if winnr() == 1
            if tabpagenr() == 1
            " We're at the beginning of the first tab, wrap around
                tablast
                exe winnr('$') . "wincmd w"
            else
                " We're at the beginning of this tab, go to the previous
                tabprevious
                exe winnr('$') . "wincmd w"
           endif
        else
            " We're at some random window in the tab, go to the previous window
            wincmd W
        endif
    endfunction

    " MS Windows-style bindings for gvim
    nnoremap <C-Tab> :call NextWindow()<cr>
    nnoremap <CS-Tab> :call PrevWindow()<cr>

    " Vim-style bindings for terminals
    nnoremap <C-W>w :call NextWindow()<cr>
    nnoremap <C-W><C-W> :call NextWindow()<cr>
    nnoremap <C-W>W :call PrevWindow()<cr>

endif


" =============================================================================
" PLATFORM- AND COMPUTER-SPECIFIC STUFF
" -----------------------------------------------------------------------------
" Platform-dependent bits
if has("win32")
    set fileformats=dos,unix,mac
elseif has("unix")
    set fileformats=unix,dos,mac
endif

" If it exists, include user's local vim config
if filereadable(expand("~/.vimrc.local"))
    source ~/.vimrc.local
endif

