" =============================================================================
" GENERAL SETTINGS
" -----------------------------------------------------------------------------

set nocompatible                        " Disable compatibility with vi
call pathogen#infect()                  " Initialize pathogen.

set history=1000                        " Command history = lots
set undolevels=1000                     " Lots and lots of undo
filetype on                             " Filetype detection on
filetype plugin on                      " Enable loading plugin files
filetype indent on                      " Enable loading indent files
syntax on                               " Syntax highlighting on

set nobk nowb noswf             " Disable backup, swapfiles, etc. (we have git)


" =============================================================================
" PRESENTATION
" -----------------------------------------------------------------------------

set shm=atI                     " Disable the distracting intro screen
set visualbell                  " Flash cursor instead of bell
set noerrorbells                " No error bells
set showmode                    " Display the current mode in the status bar

set number                      " Show line numbers
set numberwidth=5               " Linenumber width is 5


" =============================================================================
" STATUSLINE
" -----------------------------------------------------------------------------

set laststatus=2                " Always display a status line


" =============================================================================
" TAB SETTINGS
" -----------------------------------------------------------------------------

set wildmenu                    " Enable command-line tab completion
set wildmode=longest,list,full  " Set tab-completion order

set wildignore+=*.o,*.obj,*.pyc,*.DS_Store,*.db,.git,*.bak,.svn,*.swp


" Don't redraw the screen during macros.
set lazyredraw

" Don't syntax highlight super-long lines (for performance)
set synmaxcol=2048

" Improves redrawing for "newer" computers (where "newer" is defined as "not 
" ancient").
set ttyfast

" Show file in titlebar
set title

" When the page starts to scroll, keep the cursor 3 lines from top/bottom
set scrolloff=5

" Allow the cursor to go to 'invalid' locations. Note: disabled becuase it's irritating.
" set virtualedit=all

" Display current column/line in bottom right
set ruf=%l:%c ruler 

" Show incomplete command at bottom right, please.
set showcmd

" Allow backspacing over anything
set bs=2

" Only be case sensitive when search contains uppercase letters.
set ignorecase smartcase





" Allow hidden buffers (REALLY useful as well).
set hidden

" Enable mouse support.
set mouse=a

" Enable unicode support (seriously).
set enc=utf-8

" Highlight search matches!
set hlsearch

" Search incrementally
set incsearch
set wrapscan

" Show tabs as ">"
set list
set listchars=tab:>.

" Show matching brackets
set showmatch 

" Tabs are spaces, width 4, and are treated as single chars.
set smarttab
set expandtab
set tabstop=4

" A long timeout for mappings, but a short timeout for keycodes (so 'Esc' is
" quickly detected, but you can take a while to type mappings).
set timeout timeoutlen=3000 ttimeoutlen=100

" This must be done before the color scheme is specified.
highlight ExtraWhitespace ctermbg=red guibg=red
au ColorScheme * highlight ExtraWhitespace ctermbg=red guibg=red
au BufEnter * match ExtraWhitespace /\s\+$/
au InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
au InsertLeave * match ExtraWhiteSpace /\s\+$/

" Color scheme
let g:solarized_termcolors=256
set background=dark
colorscheme solarized

" Turn off tab-replacement for Makefiles
autocmd FileType make setlocal noexpandtab

" Add json syntax highlighting
au BufNewFile,BufRead *.json set ft=javascript

" Command to sudo save file
cmap w!! w !sudo tee % >/dev/null

" MS Windows-style 'indent/dedent selection'
vmap <Tab> >
vmap <S-Tab> <

" MS Windows-style 'next pane' and 'previous pane' (overridden for Vim 7 later)
nmap <C-Tab> w
nmap <CS-Tab> W

" Easier moving in windows
noremap <C-j> <C-W>j
noremap <C-k> <C-W>k
noremap <C-l> <C-W>l
noremap <C-h> <C-W>h

" Control-L will redraw the screen - tell it to un-highlight too.
nnoremap <silent> <C-l> :nohlsearch<CR><C-l>

" Remap K to 'split line'
nnoremap K i<CR><Esc>

" Making it so ; works like : for commands. Saves typing and eliminates :W
" style typos
nnoremap ; :

" Set Ctrl-P as the command to invoke the CtrlP plugin.
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'

" Uncomment to highlight the line with the cursor.  I find this kinda
" irritating.
" set cursorline

" Functions go after this
" -----------------------------------------------------------
if v:version >= 700
    " A single key for stepping through all open buffers.
    function NextWindow()
        if winnr() == winnr('$')
            if tabpagenr() == tabpagenr('$')
                " We're at the end of the last tab, go back to the beginning
                tabfirst    " Go to first tab
                1 wincmd w  " Go to first window
            else
                " We're at the end of this tab, go to the next tab
                tabnext     " Go to next tab
                1 wincmd w  " Go to first window
            endif
        else
            " We're at some random window in the tab, go to the next window
            wincmd w
        endif
    endfunction

    function PrevWindow()
        if winnr() == 1
            if tabpagenr() == 1
            " We're at the beginning of the first tab, wrap around
                tablast
                exe winnr('$') . "wincmd w"
            else
                " We're at the beginning of this tab, go to the previous
                tabprevious
                exe winnr('$') . "wincmd w"
           endif
        else
            " We're at some random window in the tab, go to the previous window
            wincmd W
        endif
    endfunction

    " MS Windows-style bindings for gvim
    nnoremap <C-Tab> :call NextWindow()<cr>
    nnoremap <CS-Tab> :call PrevWindow()<cr>

    " Vim-style bindings for terminals
    nnoremap <C-W>w :call NextWindow()<cr>
    nnoremap <C-W><C-W> :call NextWindow()<cr>
    nnoremap <C-W>W :call PrevWindow()<cr>

endif

" Settings for the python syntax highlighter
if has("expr")
    let python_highlight_string_formatting = 1
    let python_highlight_indent_errors = 1
    let python_slow_sync = 1
endif

" TODO: Move this somewhere sane
autocmd FileType ruby set textwidth=79
autocmd FileType ruby set tabstop=2
autocmd FileType ruby set shiftwidth=2
"autocmd FileType ruby set g:detectindent_preferred_expandtab = 1

" TODO: bind leader-leader to save
" TODO: grab andy's fancy whitespace regex
" TODO: backslsash x --> chmod +x curr file
" TODO: autoindent - why is it off?
" TODO: remap Ctrl-L to something else - currently it clears the screen and
" also conflicts with "move window right", above

" Platform-dependent bits
if has("win32")
    set fileformats=dos,unix,mac
elseif has("unix")
    set fileformats=unix,dos,mac
endif

" If it exists, include user's local vim config
if filereadable(expand("~/.vimrc.local"))
    source ~/.vimrc.local
endif

