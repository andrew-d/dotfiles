" Disable compatibility with vi
set nocompatible

" Initialize pathogen.
filetype off
call pathogen#infect()

" Set filetype stuff to on
filetype on
filetype plugin on
filetype indent on

" Who uses a text editor without syntax highlighting these days?
syntax on

" Undo and history should have LOTS of space
set history=1000
set undolevels=1000

" Disable the distracting intro screen.
set shm=atI

" Set visual bell / turns off the damn beeping.
set visualbell
set noerrorbells

" Don't redraw the screen during macros.
set lazyredraw

" Don't syntax highlight super-long lines (for performance)
set synmaxcol=2048

" Improves redrawing for "newer" computers (where "newer" is defined as "not 
" ancient").
set ttyfast

" Disable backup (useful since most files are version-controlled)
set nobk nowb noswf

" Show line numbers, width = 5
set number
set numberwidth=5

" Display the current mode in the status bar
set showmode

" Show file in titlebar
set title

" When the page starts to scroll, keep the cursor 3 lines from top/bottom
set scrolloff=5

" Allow the cursor to go to 'invalid' locations. Note: disabled becuase it's irritating.
" set virtualedit=all

" Display current column/line in bottom right
set ruf=%l:%c ruler 

" Show incomplete command at bottom right, please.
set showcmd

" Allow backspacing over anything
set bs=2

" Only be case sensitive when search contains uppercase letters.
set ignorecase smartcase

" Always display a status line
set laststatus=2 

" Enable command-line tab completion (REALLY useful).
set wim=full wildmenu

" Hide irrelevent matches when completing stuff.
set wildignore+=*.o,*.obj,*.pyc,*.DS_Store,*.db,.git,*.bak,.svn,*.swp

" Allow hidden buffers (REALLY useful as well).
set hidden

" Enable mouse support.
set mouse=a

" Enable unicode support (seriously).
set enc=utf-8

" Highlight search matches!
set hlsearch

" Search incrementally
set incsearch
set wrapscan

" Show tabs as ">"
set list
set listchars=tab:>.

" Show matching brackets
set showmatch 

" Tabs are spaces, width 4, and are treated as single chars.
set expandtab
set tabstop=4
set softtabstop=4

" A long timeout for mappings, but a short timeout for keycodes (so 'Esc' is
" quickly detected, but you can take a while to type mappings).
set timeout timeoutlen=3000 ttimeoutlen=100

" Color scheme
colorscheme desert

" Turn off tab-replacement for Makefiles
autocmd FileType make setlocal noexpandtab

" Add json syntax highlighting
au BufNewFile,BufRead *.json set ft=javascript

" Command to sudo save file
cmap w!! w !sudo tee % >/dev/null

" MS Windows-style 'indent/dedent selection'
vmap <Tab> >
vmap <S-Tab> <

" MS Windows-style 'next pane' and 'previous pane' (overridden for Vim 7 later)
nmap <C-Tab> w
nmap <CS-Tab> W

" Easier moving in windows
noremap <C-j> <C-W>j
noremap <C-k> <C-W>k
noremap <C-l> <C-W>l
noremap <C-h> <C-W>h

" Control-L will redraw the screen - tell it to un-highlight too.
nnoremap <silent> <C-l> :nohlsearch<CR><C-l>

" Making it so ; works like : for commands. Saves typing and eliminates :W
" style typos
nnoremap ; :

" Uncomment to highlight the line with the cursor.  I find this kinda
" irritating.
" set cursorline

" Functions go after this
" -----------------------------------------------------------
if v:version >= 700
    " A single key for stepping through all open buffers.
    function NextWindow()
        if winnr() == winnr('$')
            if tabpagenr() == tabpagenr('$')
                " We're at the end of the last tab, go back to the beginning
                tabfirst    " Go to first tab
                1 wincmd w  " Go to first window
            else
                " We're at the end of this tab, go to the next tab
                tabnext     " Go to next tab
                1 wincmd w  " Go to first window
            endif
        else
            " We're at some random window in the tab, go to the next window
            wincmd w
        endif
    endfunction

    function PrevWindow()
        if winnr() == 1
            if tabpagenr() == 1
            " We're at the beginning of the first tab, wrap around
                tablast
                exe winnr('$') . "wincmd w"
            else
                " We're at the beginning of this tab, go to the previous
                tabprevious
                exe winnr('$') . "wincmd w"
           endif
        else
            " We're at some random window in the tab, go to the previous window
            wincmd W
        endif
    endfunction

    " MS Windows-style bindings for gvim
    nnoremap <C-Tab> :call NextWindow()<cr>
    nnoremap <CS-Tab> :call PrevWindow()<cr>

    " Vim-style bindings for terminals
    nnoremap <C-W>w :call NextWindow()<cr>
    nnoremap <C-W><C-W> :call NextWindow()<cr>
    nnoremap <C-W>W :call PrevWindow()<cr>

endif

" Settings for the python syntax highlighter
if has("expr")
    let python_highlight_string_formatting = 1
    let python_highlight_indent_errors = 1
    let python_slow_sync = 1
endif

" Platform-dependent bits
if has("win32")
    set fileformats=dos,unix,mac
elseif has("unix")
    set fileformats=unix,dos,mac
endif

" If it exists, include user's local vim config
if filereadable(expand("~/.vimrc.local"))
    source ~/.vimrc.local
endif

